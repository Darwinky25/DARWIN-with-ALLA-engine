#!/usr/bin/env python3
"""
test_arc_phase1.py - ALLA Initiative Phase 1 Demonstration

This script demonstrates the core capabilities implemented in Phase 1:
1. ARC grid parsing and internal representation
2. Scene understanding with WorldObject conversion
3. Knowledge graph bootstrapping with ARC concepts
4. Integration with existing ALLA v16.0 capabilities

Phase 1 Objective: Establish basic I/O and internal representations for ARC tasks.
"""

import json
from pathlib import Path
from arc_core import ARCAllaEngine, ARCTask, ARCGrid, ARCCell

def create_sample_arc_task() -> dict:
    """Create a simple ARC task for testing."""
    return {
        "train": [
            {
                "input": [
                    [0, 0, 0],
                    [0, 1, 0], 
                    [0, 0, 0]
                ],
                "output": [
                    [0, 0, 0],
                    [0, 0, 0],
                    [0, 1, 0]
                ]
            },
            {
                "input": [
                    [0, 2, 0],
                    [0, 0, 0],
                    [0, 0, 0]
                ],
                "output": [
                    [0, 0, 0],
                    [0, 0, 0],
                    [0, 2, 0]
                ]
            }
        ],
        "test": [
            {
                "input": [
                    [0, 3, 0],
                    [0, 0, 0],
                    [0, 0, 0]
                ]
            }
        ]
    }

def test_arc_data_structures():
    """Test Phase 1: ARC data structures and parsing."""
    print("=" * 60)
    print("ALLA INITIATIVE - PHASE 1 TESTING")
    print("Core Language & Scene Understanding")
    print("=" * 60)
    
    print("\n[PHASE 1.1] Testing ARC Data Structures...")
    
    # Test ARCCell
    cell = ARCCell(x=1, y=2, color=5, grid_id="test_grid")
    print(f"Created ARCCell: {cell}")
    
    # Test conversion to WorldObject
    world_obj = cell.to_world_object()
    print(f"Converted to WorldObject: {world_obj}")
    
    # Test ARCGrid
    sample_grid = [
        [0, 1, 0],
        [1, 1, 1], 
        [0, 1, 0]
    ]
    
    grid = ARCGrid(
        grid_id="test_input",
        width=3,
        height=3,
        cells=sample_grid
    )
    
    print(f"\nCreated ARCGrid: {grid.grid_id} ({grid.width}x{grid.height})")
    print(f"Non-black cells: {len(grid.get_non_black_cells())}")
    
    # Test connected components
    components = grid.find_connected_components()
    print(f"Connected components: {len(components)}")
    for i, component in enumerate(components):
        print(f"  Component {i}: {len(component)} cells")
    
    print("‚úì ARC Data Structures working correctly!")
    return True

def test_scene_parser():
    """Test Phase 1: Scene Parser - The AI's Eyes."""
    print(f"\n[PHASE 1.2] Testing Scene Parser...")
    
    # Create ARC-Enhanced ALLA Engine
    print("Initializing ARC-Enhanced ALLA Engine...")
    arc_alla = ARCAllaEngine(memory_path="test_arc_memory.json")
    
    # Create and load a sample task
    sample_task = create_sample_arc_task()
    
    # Save to file and load
    task_path = Path("sample_arc_task.json")
    with open(task_path, 'w') as f:
        json.dump(sample_task, f, indent=2)
    
    # Load task
    task = arc_alla.load_arc_task(task_path)
    print(f"Loaded task: {task.task_id}")
    
    # Test scene parsing
    print(f"Parsed scenes: {list(arc_alla.parsed_scenes.keys())}")
    
    # Analyze first training input
    first_input = "train_input_0"
    if first_input in arc_alla.parsed_scenes:
        objects = arc_alla.parsed_scenes[first_input]
        print(f"First training input has {len(objects)} objects:")
        for obj in objects:
            print(f"  - {obj.name}: {obj.color} at {obj.position}")
    
    # Test grid visualization
    if task.train_inputs:
        visualization = arc_alla.visualize_grid(task.train_inputs[0])
        print(f"\nGrid Visualization:\n{visualization}")
    
    # Test task analysis
    analysis = arc_alla.analyze_current_task()
    print(f"\nTask Analysis:")
    print(f"  Training examples: {analysis['training_examples']}")
    print(f"  Colors used: {analysis['colors_used']}")
    print(f"  Grid sizes: {analysis['grid_sizes']}")
    
    # Clean up
    task_path.unlink()
    
    print("‚úì Scene Parser working correctly!")
    return arc_alla

def test_knowledge_bootstrap(arc_alla):
    """Test Phase 1: Knowledge Bootstrap."""
    print(f"\n[PHASE 1.3] Testing Knowledge Bootstrap...")
    
    # Test that ARC concepts were added
    arc_concepts = ['up', 'down', 'left', 'right', 'adjacent', 'grid_cell', 'pattern']
    
    print("Checking ARC concepts in ALLA's lexicon:")
    for concept in arc_concepts:
        entry = arc_alla.lexicon.get_entry(concept)
        if entry:
            print(f"  ‚úì {concept}: {entry.word_type}")
        else:
            print(f"  ‚úó {concept}: Not found")
    
    # Test color concepts
    print("\nChecking color concepts:")
    colors = ['blue', 'red', 'green', 'yellow']
    for color in colors:
        entry = arc_alla.lexicon.get_entry(color)
        if entry:
            print(f"  ‚úì {color}: {entry.word_type}")
        else:
            print(f"  ‚úó {color}: Not found")
    
    # Test semantic memory
    print(f"\nSemantic memory nodes: {len(arc_alla.semantic_memory.nodes)}")
    for node_id, node in arc_alla.semantic_memory.nodes.items():
        if node_id.startswith("concept:"):
            print(f"  - {node_id}: {node.concept_type}")
    
    print("‚úì Knowledge Bootstrap working correctly!")
    return True

def test_alla_integration(arc_alla):
    """Test Phase 1: Integration with existing ALLA capabilities."""
    print(f"\n[PHASE 1.4] Testing ALLA Integration...")
    
    # Test that ALLA can process commands with ARC concepts
    test_commands = [
        "what is blue",
        "what is a grid_cell", 
        "what do you know about spatial_relation",
        "list all colors"
    ]
    
    print("Testing ALLA commands with ARC concepts:")
    for cmd in test_commands:
        try:
            feedback, result = arc_alla.process_command(cmd)
            print(f"  '{cmd}' ‚Üí {feedback}")
            if result:
                print(f"    Result: {result}")
        except Exception as e:
            print(f"  '{cmd}' ‚Üí ERROR: {e}")
    
    # Test goal setting with ARC concepts
    print(f"\nTesting goal setting:")
    try:
        goal = arc_alla.set_goal("I understand blue")
        if goal:
            print(f"  ‚úì Created goal: {goal.description}")
        else:
            print(f"  ‚úó Failed to create goal")
    except Exception as e:
        print(f"  ‚úó Goal creation error: {e}")
    
    print("‚úì ALLA Integration working correctly!")
    return True

def test_phase1_complete():
    """Run complete Phase 1 test suite."""
    print("Starting ALLA Initiative Phase 1 Complete Test...")
    
    success = True
    
    try:
        # Test 1: Data Structures
        success &= test_arc_data_structures()
        
        # Test 2: Scene Parser
        arc_alla = test_scene_parser()
        
        # Test 3: Knowledge Bootstrap  
        success &= test_knowledge_bootstrap(arc_alla)
        
        # Test 4: ALLA Integration
        success &= test_alla_integration(arc_alla)
        
        # Final cleanup
        arc_alla.shutdown()
        
        # Clean up test files
        test_files = ["test_arc_memory.json", "knowledge_graph.json"]
        for file in test_files:
            if Path(file).exists():
                Path(file).unlink()
        
    except Exception as e:
        print(f"\n‚úó Phase 1 test failed with error: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print(f"\n{'='*60}")
    if success:
        print("üéâ PHASE 1 COMPLETE - ALL TESTS PASSED!")
        print("\nPhase 1 Achievements:")
        print("‚úì ARC data structures implemented and working")
        print("‚úì Scene parser converts ARC grids to ALLA objects")
        print("‚úì Knowledge bootstrap adds ARC concepts")
        print("‚úì Full integration with existing ALLA v16.0")
        print("\nREADY FOR PHASE 2: Symbolic Reasoning Engine")
    else:
        print("‚ùå PHASE 1 INCOMPLETE - Some tests failed")
        print("Please review the errors above before proceeding")
    
    print(f"{'='*60}")
    return success

if __name__ == "__main__":
    test_phase1_complete()
